{"version":3,"file":"token-action-hud-ose.min.js","sources":["constants.js","utils.js","action-handler.js","defaults.js","roll-handler.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n    ID: 'token-action-hud-ose'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n    ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '1.5'\n\n/**\n * Action types\n */\nexport const ACTION_TYPE = {\n    item: 'tokenActionHud.template.item',\n    utility: 'tokenActionHud.utility'\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n    armor: { id: 'armor', name: 'tokenActionHud.template.armor', type: 'system' },\n    equipment: { id: 'equipment', name: 'tokenActionHud.template.equipment', type: 'system' },\n    consumables: { id: 'consumables', name: 'tokenActionHud.template.consumables', type: 'system' },\n    containers: { id: 'containers', name: 'tokenActionHud.template.containers', type: 'system' },\n    treasure: { id: 'treasure', name: 'tokenActionHud.template.treasure', type: 'system' },\n    weapons: { id: 'weapons', name: 'tokenActionHud.template.weapons', type: 'system' },\n    combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\n    token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' }\n}\n\n/**\n * Item types\n */\nexport const ITEM_TYPE = {\n    armor: { groupId: 'armor' },\n    backpack: { groupId: 'containers' },\n    consumable: { groupId: 'consumables' },\n    equipment: { groupId: 'equipment' },\n    treasure: { groupId: 'treasure' },\n    weapon: { groupId: 'weapons' }\n}\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Utility functions\n     */\n    Utils = class Utils {\n        /**\n         * Get setting\n         * @param {string} key               The key\n         * @param {string=null} defaultValue The default value\n         * @returns {string}                 The setting value\n         */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n         * Set setting\n         * @param {string} key   The key\n         * @param {string} value The value\n         */\n        static async setSetting (key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n","// System Module Imports\nimport { ACTION_TYPE, ITEM_TYPE } from './constants.js'\nimport { Utils } from './utils.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's ActionHandler class and builds system-defined actions for the HUD\n     */\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n        /**\n         * Build system actions\n         * Called by Token Action HUD Core\n         * @override\n         * @param {array} groupIds\n         */a\n        async buildSystemActions (groupIds) {\n            // Set actor and token variables\n            this.actors = (!this.actor) ? this._getActors() : [this.actor]\n            this.actorType = this.actor?.type\n\n            // Settings\n            this.displayUnequipped = Utils.getSetting('displayUnequipped')\n\n            // Set items variable\n            if (this.actor) {\n                let items = this.actor.items\n                items = coreModule.api.Utils.sortItemsByName(items)\n                this.items = items\n            }\n\n            if (this.actorType === 'character') {\n                this.#buildCharacterActions()\n            } else if (!this.actor) {\n                this.#buildMultipleTokenActions()\n            }\n        }\n\n        /**\n         * Build character actions\n         * @private\n         */\n        #buildCharacterActions () {\n            this.#buildInventory()\n        }\n\n        /**\n         * Build multiple token actions\n         * @private\n         * @returns {object}\n         */\n        #buildMultipleTokenActions () {\n        }\n\n        /**\n         * Build inventory\n         * @private\n         */\n        async #buildInventory () {\n            if (this.items.size === 0) return\n\n            const actionTypeId = 'item'\n            const inventoryMap = new Map()\n\n            for (const [itemId, itemData] of this.items) {\n                const type = itemData.type\n                const equipped = itemData.equipped\n\n                if (equipped || this.displayUnequipped) {\n                    const typeMap = inventoryMap.get(type) ?? new Map()\n                    typeMap.set(itemId, itemData)\n                    inventoryMap.set(type, typeMap)\n                }\n            }\n\n            for (const [type, typeMap] of inventoryMap) {\n                const groupId = ITEM_TYPE[type]?.groupId\n\n                if (!groupId) continue\n\n                const groupData = { id: groupId, type: 'system' }\n\n                // Get actions\n                const actions = [...typeMap].map(([itemId, itemData]) => {\n                    const id = itemId\n                    const name = itemData.name\n                    const actionTypeName = coreModule.api.Utils.i18n(ACTION_TYPE[actionTypeId])\n                    const listName = `${actionTypeName ? `${actionTypeName}: ` : ''}${name}`\n                    const encodedValue = [actionTypeId, id].join(this.delimiter)\n\n                    return {\n                        id,\n                        name,\n                        listName,\n                        encodedValue\n                    }\n                })\n\n                // TAH Core method to add actions to the action list\n                this.addActions(actions, groupData)\n            }\n        }\n    }\n})\n","import { GROUP } from './constants.js'\n\n/**\n * Default layout and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach(group => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.listName ?? group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'inventory',\n                id: 'inventory',\n                name: coreModule.api.Utils.i18n('Template.Inventory'),\n                groups: [\n                    { ...groups.weapons, nestId: 'inventory_weapons' },\n                    { ...groups.armor, nestId: 'inventory_armor' },\n                    { ...groups.equipment, nestId: 'inventory_equipment' },\n                    { ...groups.consumables, nestId: 'inventory_consumables' },\n                    { ...groups.containers, nestId: 'inventory_containers' },\n                    { ...groups.treasure, nestId: 'inventory_treasure' }\n                ]\n            },\n            {\n                nestId: 'utility',\n                id: 'utility',\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n                groups: [\n                    { ...groups.combat, nestId: 'utility_combat' },\n                    { ...groups.token, nestId: 'utility_token' },\n                    { ...groups.rests, nestId: 'utility_rests' },\n                    { ...groups.utility, nestId: 'utility_utility' }\n                ]\n            }\n        ],\n        groups: groupsArray\n    }\n})\n","export let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's RollHandler class and handles action events triggered when an action is clicked\n     */\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\n        /**\n         * Handle action click\n         * Called by Token Action HUD Core when an action is left or right-clicked\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionClick (event, encodedValue) {\n            const [actionTypeId, actionId] = encodedValue.split('|')\n\n            const renderable = ['item']\n\n            if (renderable.includes(actionTypeId) && this.isRenderItem()) {\n                return this.doRenderItem(this.actor, actionId)\n            }\n\n            const knownCharacters = ['character']\n\n            // If single actor is selected\n            if (this.actor) {\n                await this.#handleAction(event, this.actor, this.token, actionTypeId, actionId)\n                return\n            }\n\n            const controlledTokens = canvas.tokens.controlled\n                .filter((token) => knownCharacters.includes(token.actor?.type))\n\n            // If multiple actors are selected\n            for (const token of controlledTokens) {\n                const actor = token.actor\n                await this.#handleAction(event, actor, token, actionTypeId, actionId)\n            }\n        }\n\n        /**\n         * Handle action hover\n         * Called by Token Action HUD Core when an action is hovered on or off\n         * @override\n         * @param {object} event        The event\n         * @param {string} encodedValue The encoded value\n         */\n        async handleActionHover (event, encodedValue) {}\n\n        /**\n         * Handle group click\n         * Called by Token Action HUD Core when a group is right-clicked while the HUD is locked\n         * @override\n         * @param {object} event The event\n         * @param {object} group The group\n         */\n        async handleGroupClick (event, group) {}\n\n        /**\n         * Handle action\n         * @private\n         * @param {object} event        The event\n         * @param {object} actor        The actor\n         * @param {object} token        The token\n         * @param {string} actionTypeId The action type id\n         * @param {string} actionId     The actionId\n         */\n        async #handleAction (event, actor, token, actionTypeId, actionId) {\n            switch (actionTypeId) {\n            case 'item':\n                this.#handleItemAction(event, actor, actionId)\n                break\n            case 'utility':\n                this.#handleUtilityAction(token, actionId)\n                break\n            }\n        }\n\n        /**\n         * Handle item action\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #handleItemAction (event, actor, actionId) {\n            const item = actor.items.get(actionId)\n            item.toChat(event)\n        }\n\n        /**\n         * Handle utility action\n         * @private\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #handleUtilityAction (token, actionId) {\n            switch (actionId) {\n            case 'endTurn':\n                if (game.combat?.current?.tokenId === token.id) {\n                    await game.combat?.nextTurn()\n                }\n                break\n            }\n        }\n    }\n})\n","import { MODULE } from './constants.js'\n\n/**\n * Register module settings\n * Called by Token Action HUD Core to register Token Action HUD system module settings\n * @param {function} coreUpdate Token Action HUD Core update function\n */\nexport function register (coreUpdate) {\n    game.settings.register(MODULE.ID, 'displayUnequipped', {\n        name: game.i18n.localize('tokenActionHud.template.settings.displayUnequipped.name'),\n        hint: game.i18n.localize('tokenActionHud.template.settings.displayUnequipped.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            coreUpdate(value)\n        }\n    })\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { MODULE } from './constants.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    /**\n     * Extends Token Action HUD Core's SystemManager class\n     */\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /**\n         * Returns an instance of the ActionHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {class} The ActionHandler instance\n         */\n        getActionHandler () {\n            return new ActionHandler()\n        }\n\n        /**\n         * Returns a list of roll handlers to Token Action HUD Core\n         * Used to populate the Roll Handler module setting choices\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The available roll handlers\n         */\n        getAvailableRollHandlers () {\n            const coreTitle = 'Core Template'\n            const choices = { core: coreTitle }\n            return choices\n        }\n\n        /**\n         * Returns an instance of the RollHandler to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @param {string} rollHandlerId The roll handler ID\n         * @returns {class}              The RollHandler instance\n         */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n            return rollHandler\n        }\n\n        /**\n         * Returns the default layout and groups to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @returns {object} The default layout and groups\n         */\n        async registerDefaults () {\n            return DEFAULTS\n        }\n\n        /**\n         * Register Token Action HUD system module settings\n         * Called by Token Action HUD Core\n         * @override\n         * @param {function} coreUpdate The Token Action HUD Core update function\n         */\n        registerSettings (coreUpdate) {\n            systemSettings.register(coreUpdate)\n        }\n\n        /**\n         * Returns styles to Token Action HUD Core\n         * Called by Token Action HUD Core\n         * @override\n         * @returns {object} The TAH system styles\n         */\n        registerStyles () {\n            return {\n                template: {\n                    class: 'tah-style-template-style', // The class to add to first DIV element\n                    file: 'tah-template-style', // The file without the css extension\n                    moduleId: MODULE.ID, // The module ID\n                    name: 'Template Style' // The name to display in the Token Action HUD Core 'Style' module setting\n                }\n            }\n        }\n    }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    /**\n     * Return the SystemManager and requiredCoreModuleVersion to Token Action HUD Core\n     */\n    const module = game.modules.get(MODULE.ID)\n    module.api = {\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n        SystemManager\n    }\n    Hooks.call('tokenActionHudSystemReady', module)\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","item","utility","GROUP","armor","id","name","type","equipment","consumables","containers","treasure","weapons","combat","token","ITEM_TYPE","groupId","backpack","consumable","weapon","Utils","Hooks","once","async","coreModule","static","key","defaultValue","value","game","settings","get","api","Logger","debug","set","ActionHandler","a","groupIds","this","actors","actor","_getActors","actorType","displayUnequipped","getSetting","items","sortItemsByName","buildCharacterActions","buildMultipleTokenActions","buildInventory","size","actionTypeId","inventoryMap","Map","itemId","itemData","equipped","typeMap","groupData","actions","map","actionTypeName","i18n","listName","encodedValue","join","delimiter","addActions","DEFAULTS","groups","Object","values","forEach","group","groupsArray","layout","nestId","rests","RollHandler","register","coreUpdate","localize","hint","scope","config","Boolean","default","onChange","event","actionId","split","includes","isRenderItem","doRenderItem","knownCharacters","handleAction","controlledTokens","canvas","tokens","controlled","filter","handleItemAction","handleUtilityAction","toChat","current","tokenId","nextTurn","SystemManager","getActionHandler","getAvailableRollHandlers","core","getRollHandler","rollHandlerId","rollHandler","Core","registerSettings","systemSettings.register","registerStyles","template","class","file","moduleId","on","module","modules","requiredCoreModuleVersion","call"],"mappings":"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"}