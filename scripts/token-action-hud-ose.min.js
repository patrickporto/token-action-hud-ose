const t={ID:"token-action-hud-ose"},e={ID:"token-action-hud-core"},n="1.5",i={item:"tokenActionHud.template.item",utility:"tokenActionHud.utility"},o={armor:{id:"armor",name:"tokenActionHud.template.armor",type:"system"},equipment:{id:"equipment",name:"tokenActionHud.template.equipment",type:"system"},consumables:{id:"consumables",name:"tokenActionHud.template.consumables",type:"system"},containers:{id:"containers",name:"tokenActionHud.template.containers",type:"system"},treasure:{id:"treasure",name:"tokenActionHud.template.treasure",type:"system"},weapons:{id:"weapons",name:"tokenActionHud.template.weapons",type:"system"},combat:{id:"combat",name:"tokenActionHud.combat",type:"system"},token:{id:"token",name:"tokenActionHud.token",type:"system"},utility:{id:"utility",name:"tokenActionHud.utility",type:"system"}},s={armor:{groupId:"armor"},backpack:{groupId:"containers"},consumable:{groupId:"consumables"},equipment:{groupId:"equipment"},treasure:{groupId:"treasure"},weapon:{groupId:"weapons"}};let a=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{a=class Utils{static getSetting(n,i=null){let o=i??null;try{o=game.settings.get(t.ID,n)}catch{e.api.Logger.debug(`Setting '${n}' not found`)}return o}static async setSetting(n,i){try{i=await game.settings.set(t.ID,n,i),e.api.Logger.debug(`Setting '${n}' set to '${i}'`)}catch{e.api.Logger.debug(`Setting '${n}' not found`)}}}}));let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{r=class ActionHandler extends t.api.ActionHandler{a;async buildSystemActions(e){if(this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.displayUnequipped=a.getSetting("displayUnequipped"),this.actor){let e=this.actor.items;e=t.api.Utils.sortItemsByName(e),this.items=e}"character"===this.actorType?this.#t():this.actor||this.#e()}#t(){this.#n()}#e(){}async#n(){if(0===this.items.size)return;const e="item",n=new Map;for(const[t,e]of this.items){const i=e.type;if(e.equipped||this.displayUnequipped){const o=n.get(i)??new Map;o.set(t,e),n.set(i,o)}}for(const[o,a]of n){const n=s[o]?.groupId;if(!n)continue;const r={id:n,type:"system"},c=[...a].map((([n,o])=>{const s=n,a=o.name,r=t.api.Utils.i18n(i[e]),c=`${r?`${r}: `:""}${a}`,l=[e,s].join(this.delimiter);return{id:s,name:a,listName:c,encodedValue:l}}));this.addActions(c,r)}}}}));let c=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=o;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const n=Object.values(e);c={layout:[{nestId:"inventory",id:"inventory",name:t.api.Utils.i18n("Template.Inventory"),groups:[{...e.weapons,nestId:"inventory_weapons"},{...e.armor,nestId:"inventory_armor"},{...e.equipment,nestId:"inventory_equipment"},{...e.consumables,nestId:"inventory_consumables"},{...e.containers,nestId:"inventory_containers"},{...e.treasure,nestId:"inventory_treasure"}]},{nestId:"utility",id:"utility",name:t.api.Utils.i18n("tokenActionHud.utility"),groups:[{...e.combat,nestId:"utility_combat"},{...e.token,nestId:"utility_token"},{...e.rests,nestId:"utility_rests"},{...e.utility,nestId:"utility_utility"}]}],groups:n}}));let l=null;function register(e){game.settings.register(t.ID,"displayUnequipped",{name:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.name"),hint:game.i18n.localize("tokenActionHud.template.settings.displayUnequipped.hint"),scope:"client",config:!0,type:Boolean,default:!0,onChange:t=>{e(t)}})}Hooks.once("tokenActionHudCoreApiReady",(async t=>{l=class RollHandler extends t.api.RollHandler{async handleActionClick(t,e){const[n,i]=e.split("|");if(["item"].includes(n)&&this.isRenderItem())return this.doRenderItem(this.actor,i);const o=["character"];if(this.actor)return void await this.#i(t,this.actor,this.token,n,i);const s=canvas.tokens.controlled.filter((t=>o.includes(t.actor?.type)));for(const e of s){const o=e.actor;await this.#i(t,o,e,n,i)}}async handleActionHover(t,e){}async handleGroupClick(t,e){}async#i(t,e,n,i,o){switch(i){case"item":this.#o(t,e,o);break;case"utility":this.#s(n,o)}}#o(t,e,n){e.items.get(n).toChat(t)}async#s(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let d=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{d=class SystemManager extends e.api.SystemManager{getActionHandler(){return new r}getAvailableRollHandlers(){return{core:"Core Template"}}getRollHandler(t){let e;return e=new l,e}async registerDefaults(){return c}registerSettings(t){register(t)}registerStyles(){return{template:{class:"tah-style-template-style",file:"tah-template-style",moduleId:t.ID,name:"Template Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"1.5",SystemManager:d},Hooks.call("tokenActionHudSystemReady",e)}));export{i as ACTION_TYPE,r as ActionHandler,e as CORE_MODULE,c as DEFAULTS,o as GROUP,s as ITEM_TYPE,t as MODULE,n as REQUIRED_CORE_MODULE_VERSION,l as RollHandler,d as SystemManager,a as Utils,register};
//# sourceMappingURL=token-action-hud-ose.min.js.map
